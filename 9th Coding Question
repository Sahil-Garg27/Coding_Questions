Trapping Rain Water

Given an array arr[] of N non-negative integers representing the height of blocks. If width of each block is 1, compute how much water can be trapped between the blocks during the rainy season.  

Example 1:

Input:
N = 6
arr[] = {3,0,0,2,0,4}
Output:
10
Explanation: 

Example 2:

Input:
N = 4
arr[] = {7,4,0,9}
Output:
10
Explanation:
Water trapped by above 
block of height 4 is 3 units and above 
block of height 0 is 7 units. So, the 
total unit of water trapped is 10 units.
Example 3:

Input:
N = 3
arr[] = {6,9,9}
Output:
0
Explanation:
No water will be trapped.


code

class Solution{
    
    // arr: input array
    // n: size of array
    // Function to find the trapped water between the blocks.
    static long trappingWater(int arr[], int n) { 
        // Your code here
        int left[]=new int [n];
        int right[]=new int [n];
        long count=0;
        
        left[0]=arr[0];
        for(int i=1;i<n;i++){
            left[i]=Math.max(left[i-1],arr[i]);
        }
        
        right[n-1]=arr[n-1];
        for(int i=n-2;i>=0;i--){
            right[i]=Math.max(right[i+1],arr[i]);
        }
        
        for(int i=0;i<n;i++){
            count+=Math.min(left[i],right[i])-arr[i];
        }
        
        return count;
    } 
}


Time Complexity: O(N)
Auxiliary Space: O(N)

Explanation:

Created two extra arrays name are left[] and right[] with same given arr[] size
left[] array stores the tallest block height encountered from the left up to each position.
right[] array stores the tallest block height encounterd from the right up to each position.
For each block, the amount of trapped water is calculated based on the minimum of the tallest blocks to its left and right, subtracting the block's height iteself.
The total trapped water is accumulated and returned.
