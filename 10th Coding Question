Three way partitioning

Given an array of size n and a range [a, b]. The task is to partition the array around the range such that the array is divided into three parts.
1) All elements smaller than a come first.
2) All elements in range a to b come next.
3) All elements greater than b appear in the end.
The individual elements of three sets can appear in any order. You are required to return the modified array.

Note: The generated output is 1 if you modify the given array successfully.

Geeky Challenge: Solve this problem in O(n) time complexity.

Example 1:

Input: 
n = 5
array[] = {1, 2, 3, 3, 4}
[a, b] = [1, 2]
Output: 
1
Explanation: 
One possible arrangement is: {1, 2, 3, 3, 4}. If you return a valid arrangement, output will be 1.
Example 2:

Input: 
n = 6 
array[] = {1, 4, 3, 6, 2, 1}
[a, b] = [1, 3]
Output: 
1
Explanation: 
One possible arrangement is: {1, 3, 2, 1, 4, 6}. If you return a valid arrangement, output will be 1.
Your Task:
You don't need to read input or print anything. The task is to complete the function threeWayPartition() which takes the array array, a, and b as input parameters and modifies the array in place according to the given conditions.

code

class Solution{
    //Function to partition the array around the range such 
    //that array is divided into three parts.
    public void threeWayPartition(int array[], int a, int b)
    {
        // code here
        int n=array.length;
        int start=0;
        int end=n-1;
        int i=0; 
        
        while(i<=end){
            if(array[i] < a){
                int temp=array[start];
                array[start]=array[i];
                array[i]=temp;
                start++;
                i++;
            }
            else if(array[i] > b){
                int temp=array[end];
                array[end]=array[i];
                array[i]=temp;
                end--;
            }
            else{
                i++;
            }
        }
        
    }
}


Time Complexity: O(n)
Auxiliary Space: O(1)

Explanation:

The idea is to use two pointers: start and end.
The start pointer will be used to place elements smaller than a, and the end pointer will be used to place elements greater than b.
You iterate through the array with a loop, and:
If the current element is smaller than a, swap it with the element at the start pointer and increment start.
If the current element is greater than b, swap it with the element at the end pointer and decrement end.
If the current element is in the range [a, b], just move to the next element.
