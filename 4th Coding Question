Find the Duplicate Number

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
Example 3:

Input: nums = [3,3,3,3,3]
Output: 3

code

class Solution {
    public int findDuplicate(int[] nums) {
        int slow=0;
        int fast=0;

        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(slow!=fast);

        slow=0;
        while(slow!=fast){
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
    }
}

Time Complexity: O(n)
Space Complexity: O(1)

Explanation:

Floyd's Tortoise and Hare (Cycle Detection) algorithm.

Initialize two pointers, slow and fast, both starting at the beginning of the array.
Move slow one step at a time and fast two steps at a time.
Continue moving them until they meet. 
This meeting point indicates that there is a cycle in the array, 
which happens because of the duplicate number.

Reset slow to the start of the array.
Move both slow and fast one step at a time. 
The point where they meet again is the duplicate number.
