Count More than n/k Occurences

Given an array arr of size N and an element k. The task is to find the count of elements in the array that appear more than n/k times.

Example 1:

Input:
N = 8
arr = [3,1,2,2,1,2,3,3]
k = 4
Output: 
2
Explanation: 
In the given array, 3 and 2 are the only elements that appears more than n/k times.
Example 2:

Input:
N = 4
arr = [2,3,3,2]
k = 3
Output: 
2
Explanation: In the given array, 3 and 2 are the only elements that appears more than n/k times. So the count of elements are 2.
Your Task:
The task is to complete the function countOccurence() which returns count of elements with more than n/k times appearance.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

Constraints:
1 <= N <= 105
0 <= a[i] <= 109
1 <= k <= N

//code

class Solution 
{
   
    public int countOccurence(int[] arr, int n, int k) 
    {
        HashMap<Integer, Integer> frequencyMap = new HashMap<>();
        
        for (int i = 0; i < n; i++) {
            frequencyMap.put(arr[i], frequencyMap.getOrDefault(arr[i], 0) + 1);
        }
        
        int threshold = n / k;
        
        int count = 0;
        
        for(int freq : frequencyMap.values()){
            if(freq > threshold){
                count++;
            }
        }
    
        
        return count;
    }
}

Time Complexity : O(n)
Space Complextity : O(n)

Explanation : 

Purpose: The code counts how many elements in an array appear more than n/k times, where n is the size of the array and k is a given number.

Steps:

Count Frequencies: The code uses a HashMap to store how many times each element appears in the array.

Set a Threshold: It calculates the threshold n/k. Any element that appears more than this threshold is counted.

Count the Elements: The code goes through the frequency counts and counts how many elements appear more than the threshold.

Result: Finally, it returns the number of elements that appear more than n/k times in the array.
